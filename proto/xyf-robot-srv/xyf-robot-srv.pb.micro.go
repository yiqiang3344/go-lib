// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/xyf-robot-srv/xyf-robot-srv.proto

package xyf_robot_srv

import (
	"fmt"
	"github.com/golang/protobuf/proto"
	"math"
)

import (
	"context"
	"github.com/micro/go-micro/v2/api"
	"github.com/micro/go-micro/v2/client"
	"github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for XyfRobotSrv service

func NewXyfRobotSrvEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for XyfRobotSrv service

type XyfRobotSrvService interface {
	SendMsg(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error)
	Test(ctx context.Context, in *TestRequest, opts ...client.CallOption) (*Response, error)
}

type xyfRobotSrvService struct {
	c    client.Client
	name string
}

func NewXyfRobotSrvService(name string, c client.Client) XyfRobotSrvService {
	return &xyfRobotSrvService{
		c:    c,
		name: name,
	}
}

func (c *xyfRobotSrvService) SendMsg(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "XyfRobotSrv.SendMsg", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *xyfRobotSrvService) Test(ctx context.Context, in *TestRequest, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "XyfRobotSrv.Test", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for XyfRobotSrv service

type XyfRobotSrvHandler interface {
	SendMsg(context.Context, *Request, *Response) error
	Test(context.Context, *TestRequest, *Response) error
}

func RegisterXyfRobotSrvHandler(s server.Server, hdlr XyfRobotSrvHandler, opts ...server.HandlerOption) error {
	type xyfRobotSrv interface {
		SendMsg(ctx context.Context, in *Request, out *Response) error
		Test(ctx context.Context, in *TestRequest, out *Response) error
	}
	type XyfRobotSrv struct {
		xyfRobotSrv
	}
	h := &xyfRobotSrvHandler{hdlr}
	return s.Handle(s.NewHandler(&XyfRobotSrv{h}, opts...))
}

type xyfRobotSrvHandler struct {
	XyfRobotSrvHandler
}

func (h *xyfRobotSrvHandler) SendMsg(ctx context.Context, in *Request, out *Response) error {
	return h.XyfRobotSrvHandler.SendMsg(ctx, in, out)
}

func (h *xyfRobotSrvHandler) Test(ctx context.Context, in *TestRequest, out *Response) error {
	return h.XyfRobotSrvHandler.Test(ctx, in, out)
}
